name: Build and Push Docker Image

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  CACHE_REPO: derev/lab

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to DockerHub (for cache)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build image and export as OCI tar
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: Dockerfile
          push: false
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.CACHE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.CACHE_REPO }}:buildcache,mode=max
          outputs: type=oci,dest=/tmp/image.tar  # âœ… OCI format for multi-arch scan

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@v0.20.0
        with:
          input: /tmp/image.tar
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: Push image to GHCR (if scan passed)
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.CACHE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.CACHE_REPO }}:buildcache,mode=max
